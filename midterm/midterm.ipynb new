{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O4_ZpZCF9-o6"
      },
      "source": [
        "### Mid-term for HDS5210\n",
        "\n",
        "Your supervisor is concerned about 4-year survival risks for COPD. She has asked for you to do some analysis using a new metric, BODE. BODE is an improvement on a previous metric and promises to provide insight on survival risks.\n",
        "\n",
        "BODE is defined here. https://www.mdcalc.com/calc/3916/bode-index-copd-survival#evidence\n",
        "\n",
        "Your assignment is to create a BODE calculation, use it to calculate BODE scores and BODE survival rates for a group of patients. Then we want to evaluate the average BODE scores and BODE survival rates for each area hospital.\n",
        "\n",
        "Your patient input file will have the following columns:\n",
        "NAME,SSN,LANGUAGE,JOB,HEIGHT_M,WEIGHT_KG,fev_pct,dyspnea_description,distance_in_meters,hospital\n",
        "\n",
        "BODE calculations require a BMI value, so you will have to create a function for it.\n",
        "\n",
        "Your output should be in the form of two CSV files, patient_output.csv and hospital_output.csv.\n",
        "\n",
        "Patient_output will have the following columns:\n",
        "NAME,BODE_SCORE,BODE_RISK,HOSPITAL\n",
        "\n",
        "Hospital output will have the following columns:\n",
        "HOSPITAL_NAME, COPD_COUNT, PCT_OF_COPD_CASES_OVER_BEDS, AVG_SCORE, AVG_RISK\n",
        "\n",
        "Each function you create should have documentation and a suitable number of test cases. If the input data could be wrong, make sure to raise a Value Error.\n",
        "\n",
        "For this assignment, use the doctest, json, and csv libraries. Pandas is not allowed for this assignment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "id": "SrNy49QS9-o7"
      },
      "outputs": [],
      "source": [
        "import doctest\n",
        "import json\n",
        "import csv"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CSXPNF8Y9-o8"
      },
      "source": [
        "### Step 1: Calculate BMI"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 122,
      "metadata": {
        "id": "KfGEuySJ9-o8"
      },
      "outputs": [],
      "source": [
        "def calculate_bmi(weight_kg: float, height_m: float) -> float:\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    Calculate the Body Mass Index (BMI).\n",
        "\n",
        "\n",
        "\n",
        "    :param weight_kg: Weight of the patient in kilograms\n",
        "\n",
        "    :param height_m: Height of the patient in meters\n",
        "\n",
        "    :return: Calculated BMI\n",
        "\n",
        "    :raises ValueError: if weight or height are non-positive\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    if weight_kg <= 0 or height_m <= 0:\n",
        "\n",
        "        raise ValueError(\"Weight and height must be positive values.\")\n",
        "\n",
        "\n",
        "\n",
        "    return weight_kg / (height_m ** 2)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if __name__ == \"__main__\":\n",
        "    import doctest\n",
        "    doctest.testmod()\n"
      ],
      "metadata": {
        "id": "KsRx_OeuJjAG"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rt28cDF69-o9"
      },
      "source": [
        "### Step 2: Calculate BODE Score"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 124,
      "metadata": {
        "id": "e_PqOHHI9-o9"
      },
      "outputs": [],
      "source": [
        "def calculate_bode_score(fev1_points, walk_score, dyspnea_descrip, bmi_score):\n",
        "    \"\"\"\n",
        "    Calculate the BODE score based on the provided parameters.\n",
        "\n",
        "    Parameters:\n",
        "    fev1_points (float): FEV1% value.\n",
        "    walk_score (float): Six-minute walk distance in meters.\n",
        "    dyspnea_descrip (int): Description of dyspnea (0 to 10).\n",
        "    bmi (float): BMI value.\n",
        "\n",
        "    Returns:\n",
        "    int: BODE score.\n",
        "\n",
        "    Raises:\n",
        "    ValueError: If the FEV1%, six-minute walk distance, or BMI is negative.\n",
        "\n",
        "    test\n",
        "    >>> calculate_bode_score(80, 260, \"ONLY STRENUOUS EXERCISE\", 22)\n",
        "    1\n",
        "    >>> calculate_bode_score(50, 400, \"WHEN HURRYING\", 24)\n",
        "    1\n",
        "    >>> calculate_bode_score(30, 100, \"STOPS AFTER A FEW MINUTES\", 30)\n",
        "    8\n",
        "    >>> calculate_bode_score(70, 340, \"SLOWER THAN PEERS\", 27)\n",
        "    2\n",
        "    \"\"\"\n",
        "\n",
        "    if fev1_points < 0 or walk_score < 0 or bmi_score < 0: # Changed bmi to bmi_score\n",
        "        raise ValueError(\"FEV1%, six-minute walk distance, and BMI must be positive.\")\n",
        "\n",
        "# Calculate FEV1 Score\n",
        "    if fev1_points >= 60:\n",
        "        fev1_score = 0\n",
        "    elif fev1_points >= 50:\n",
        "        fev1_score = 1\n",
        "    elif fev1_points >= 35:\n",
        "        fev1_score = 2\n",
        "    else:\n",
        "        fev1_score = 3\n",
        "\n",
        "    # Calculate dyspnea Score (mMRC scale)\n",
        "    if dyspnea_descrip == \"NONE\":\n",
        "        dyspnea_scale = 0\n",
        "    elif dyspnea_descrip in [\"ONLY STRENUOUS EXERCISE\"]:\n",
        "        dyspnea_scale = 0\n",
        "    elif dyspnea_descrip in [\"WALKING UPHILL\", \"WHEN HURRYING\"]:\n",
        "        dyspnea_scale = 1\n",
        "    elif dyspnea_descrip in [\"STOPS WHEN WALKING AT PACE\", \"SLOWER THAN PEERS\"]:\n",
        "        dyspnea_scale = 2\n",
        "    elif dyspnea_descrip in [\"STOPS AFTER 100 YARDS\", \"STOPS AFTER A FEW MINUTES\"]:\n",
        "        dyspnea_scale = 3\n",
        "    elif dyspnea_descrip in [\"BREATHLESS WHEN DRESSING\", \"UNABLE TO LEAVE HOME\"]:\n",
        "        dyspnea_scale = 4\n",
        "    else:\n",
        "        raise ValueError(\"Invalid dyspnea description.\")\n",
        "# Calculate dyspnea score based on the scale\n",
        "    if dyspnea_scale in [0, 1]:\n",
        "        dyspnea_score = 0\n",
        "    elif dyspnea_scale == 2:\n",
        "        dyspnea_score = 1\n",
        "    elif dyspnea_scale == 3:\n",
        "        dyspnea_score = 2\n",
        "    else:  # dyspnea_scale == 4\n",
        "        dyspnea_score = 3\n",
        "\n",
        "\n",
        "   # Calculate six-minute walk distance score\n",
        "    if walk_score >= 350:\n",
        "        walk_points = 0\n",
        "    elif walk_score >= 250 and walk_score <=349:\n",
        "        walk_points = 1\n",
        "    elif walk_score >=150 and walk_score <=249:\n",
        "        walk_points = 2\n",
        "    else:\n",
        "        walk_points = 3\n",
        "\n",
        "    # BMI score\n",
        "    bmi_score = 0 if bmi_score >= 21 else 1\n",
        "\n",
        "    # Calculate BODE Score\n",
        "    bode_score = fev1_score + walk_points + dyspnea_score + bmi_score\n",
        "    return bode_score\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if __name__ == \"__main__\":\n",
        "    import doctest\n",
        "    doctest.testmod()"
      ],
      "metadata": {
        "id": "CKx2wQ2aKBSs"
      },
      "execution_count": 125,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9wJrEA4h9-o9"
      },
      "source": [
        "### Step 3: Calculate BODE Risk"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 126,
      "metadata": {
        "id": "FZbSJbhZ9-o-"
      },
      "outputs": [],
      "source": [
        "\n",
        "def bode_risk(bode_score: int) -> float:\n",
        "    \"\"\"\n",
        "\n",
        "    Map the BODE score to a survival risk percentage.\n",
        "\n",
        "\n",
        "\n",
        "    :param bode_score: The BODE score (0 to 10)\n",
        "\n",
        "    :return: The survival risk percentage\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    if bode_score == 0:\n",
        "\n",
        "        return 80.0\n",
        "\n",
        "    elif bode_score <= 2:\n",
        "\n",
        "        return 70.0\n",
        "\n",
        "    elif bode_score <= 4:\n",
        "\n",
        "        return 60.0\n",
        "\n",
        "    elif bode_score <= 6:\n",
        "\n",
        "        return 50.0\n",
        "\n",
        "    elif bode_score <= 8:\n",
        "\n",
        "        return 30.0\n",
        "\n",
        "    else:\n",
        "\n",
        "        return 20.0"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "assert bode_risk(0) == 80.0\n",
        "assert bode_risk(2) == 70.0\n",
        "assert bode_risk(4) == 60.0\n",
        "assert bode_risk(6) == 50.0\n",
        "assert bode_risk(8) == 30.0"
      ],
      "metadata": {
        "id": "8jvbCjElha2R"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import doctest\n",
        "doctest.run_docstring_examples(bode_risk, globals(), verbose=True)"
      ],
      "metadata": {
        "id": "Wrw1CLdjidjq",
        "outputId": "578c3815-c623-4ab1-888e-a81da579aa84",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Finding tests in NoName\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tPUyV-5f9-o-"
      },
      "source": [
        "### Step 4: Load Hospital Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 129,
      "metadata": {
        "id": "hhjYfVkW9-o-"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "import json\n",
        "\n",
        "def calculate_bmi(weight, height):\n",
        "    \"\"\"Calculate BMI from weight (kg) and height (m).\"\"\"\n",
        "    return weight / (height ** 2)\n",
        "\n",
        "def calculate_bode_score(bmi, fev_pct, dyspnea_desc, walk_distance):\n",
        "    \"\"\"Dummy function to calculate the BODE score. Implement your logic.\"\"\"\n",
        "    # Placeholder calculation logic\n",
        "    return int(bmi + fev_pct + walk_distance)  # Replace with actual formula\n",
        "\n",
        "def bode_risk(bode_score):\n",
        "    \"\"\"Dummy function to calculate the BODE risk. Implement your logic.\"\"\"\n",
        "    # Placeholder calculation logic\n",
        "    return bode_score * 0.05  # Replace with actual risk calculation\n",
        "\n",
        "def load_hospitals(json_file):\n",
        "    \"\"\"Load hospital data from a JSON file.\"\"\"\n",
        "    hospitals_data = {}\n",
        "    with open(json_file, 'r') as f:\n",
        "        data = json.load(f)\n",
        "        for system in data:\n",
        "            for hospital in system['hospitals']:\n",
        "                hospitals_data[hospital['name']] = hospital['beds']\n",
        "    return hospitals_data\n",
        "\n",
        "def process_patients(input_file: str, beds_per_hospital: dict):\n",
        "    \"\"\"\n",
        "    Process patient data from a CSV file, calculate BODE scores and risks, and generate two CSV files.\n",
        "\n",
        "    The function reads the patient input CSV file, calculates BMI, BODE score, and BODE survival risk\n",
        "    for each patient, and writes the results to 'patient_output.csv'. It also aggregates hospital-level\n",
        "    data and writes the results to 'hospital_output.csv'.\n",
        "\n",
        "    :param input_file: Path to the patient input CSV file (e.g., 'patient.csv')\n",
        "    :param beds_per_hospital: A dictionary mapping hospital names to number of beds (e.g., {'General Hospital': 120})\n",
        "    \"\"\"\n",
        "    patients = []\n",
        "    hospitals = {}\n",
        "\n",
        "    # Read input file\n",
        "    try:\n",
        "        with open(input_file, mode='r') as file:\n",
        "            csv_reader = csv.DictReader(file)\n",
        "\n",
        "            for row in csv_reader:\n",
        "                try:\n",
        "                    # Extract and validate input data\n",
        "                    name = row['NAME']\n",
        "                    hospital = row['hospital']\n",
        "                    weight = float(row['WEIGHT_KG'])\n",
        "                    height = float(row['HEIGHT_M'])\n",
        "                    fev_pct = float(row['fev_pct'])\n",
        "                    dyspnea_desc = row['dyspnea_description']\n",
        "                    walk_distance = float(row['distance_in_meters'])\n",
        "\n",
        "                    # Calculate BMI\n",
        "                    bmi = calculate_bmi(weight, height)\n",
        "\n",
        "                    # Calculate BODE score\n",
        "                    bode_score = calculate_bode_score(bmi, fev_pct, dyspnea_desc, walk_distance)\n",
        "\n",
        "                    # Calculate BODE survival risk\n",
        "                    risk = bode_risk(bode_score)\n",
        "\n",
        "                    # Append to patient list\n",
        "                    patients.append({\n",
        "                        'NAME': name,\n",
        "                        'BODE_SCORE': bode_score,\n",
        "                        'BODE_RISK': risk,\n",
        "                        'HOSPITAL': hospital\n",
        "                    })\n",
        "\n",
        "                    # Aggregate hospital data\n",
        "                    if hospital not in hospitals:\n",
        "                        hospitals[hospital] = {'count': 0, 'total_score': 0, 'total_risk': 0}\n",
        "\n",
        "                    hospitals[hospital]['count'] += 1\n",
        "                    hospitals[hospital]['total_score'] += bode_score\n",
        "                    hospitals[hospital]['total_risk'] += risk\n",
        "\n",
        "                except ValueError as e:\n",
        "                    print(f\"Error processing patient {row['NAME']}: {e}\")\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: The file {input_file} does not exist.\")\n",
        "        return\n",
        "\n",
        "    # Write patient output\n",
        "    with open('patient_output.csv', mode='w', newline='') as file:\n",
        "        writer = csv.DictWriter(file, fieldnames=['NAME', 'BODE_SCORE', 'BODE_RISK', 'HOSPITAL'])\n",
        "        writer.writeheader()\n",
        "        for patient in patients:\n",
        "            writer.writerow(patient)\n",
        "\n",
        "    # Write hospital output\n",
        "    with open('hospital_output.csv', mode='w', newline='') as file:\n",
        "        writer = csv.DictWriter(file, fieldnames=['HOSPITAL_NAME', 'COPD_COUNT', 'PCT_OF_COPD_CASES_OVER_BEDS', 'AVG_SCORE', 'AVG_RISK'])\n",
        "        writer.writeheader()\n",
        "        for hospital, data in hospitals.items():\n",
        "            beds = beds_per_hospital.get(hospital, 100)  # Default to 100 beds if not provided\n",
        "            writer.writerow({\n",
        "                'HOSPITAL_NAME': hospital,\n",
        "                'COPD_COUNT': data['count'],\n",
        "                'PCT_OF_COPD_CASES_OVER_BEDS': (data['count'] / beds) * 100,\n",
        "                'AVG_SCORE': data['total_score'] / data['count'],\n",
        "                'AVG_RISK': data['total_risk'] / data['count']\n",
        "            })\n",
        "\n",
        "\n",
        "\n",
        "# ... (rest of your code)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Use the existing beds_per_hospital variable\n",
        "    # beds_per_hospital = load_hospitals('/mnt/data/hospitals.json')\n",
        "\n",
        "    # Process the patient data using the loaded hospital data\n",
        "    process_patients('patient.csv', beds_per_hospital)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PtIuA3dN9-o-"
      },
      "source": [
        "### Step 5: Main business logic\n",
        "\n",
        "Call BODE Score, BODE Risk functions for each patient.\n",
        "\n",
        "For each hospital, calculate Avg BODE score and Avg BODE risk and count the number of cases for each hospital."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "id": "QFJFa6KG9-o_"
      },
      "outputs": [],
      "source": [
        "import csv\n",
        "import json\n",
        "\n",
        "def calculate_bmi(weight, height):\n",
        "    \"\"\"Calculate BMI from weight (kg) and height (m).\"\"\"\n",
        "    return weight / (height ** 2)\n",
        "\n",
        "def calculate_bode_score(bmi, fev_pct, dyspnea_desc, walk_distance):\n",
        "    \"\"\"Dummy function to calculate the BODE score. Implement your logic.\"\"\"\n",
        "    # Placeholder calculation logic\n",
        "    return int(bmi + fev_pct + walk_distance)  # Replace with actual formula\n",
        "\n",
        "def bode_risk(bode_score):\n",
        "    \"\"\"Dummy function to calculate the BODE risk. Implement your logic.\"\"\"\n",
        "    # Placeholder calculation logic\n",
        "    return bode_score * 0.05  # Replace with actual risk calculation\n",
        "\n",
        "def load_hospitals(json_file):\n",
        "    \"\"\"Load hospital bed data from JSON file.\"\"\"\n",
        "    hospitals_data = {}\n",
        "    try:\n",
        "        with open(json_file, 'r') as f:\n",
        "            data = json.load(f)\n",
        "            for system in data:\n",
        "                for hospital in system['hospitals']:\n",
        "                    hospitals_data[hospital['name']] = hospital['beds']\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: The file {json_file} does not exist.\")\n",
        "    except json.JSONDecodeError:\n",
        "        print(\"Error: Failed to parse JSON.\")\n",
        "\n",
        "    return hospitals_data\n",
        "\n",
        "def process_patients(input_file: str, beds_per_hospital: dict):\n",
        "    \"\"\"\n",
        "    Process patient data from a CSV file, calculate BODE scores and risks, and return patient and hospital data.\n",
        "    \"\"\"\n",
        "    patients = []\n",
        "    hospitals = {}\n",
        "\n",
        "    # Read input file\n",
        "    try:\n",
        "        with open(input_file, mode='r') as file:\n",
        "            csv_reader = csv.DictReader(file)\n",
        "\n",
        "            for row in csv_reader:\n",
        "                try:\n",
        "                    # Extract and validate input data\n",
        "                    name = row['NAME']\n",
        "                    hospital = row['hospital']\n",
        "                    weight = float(row['WEIGHT_KG'])\n",
        "                    height = float(row['HEIGHT_M'])\n",
        "                    fev_pct = float(row['fev_pct'])\n",
        "                    dyspnea_desc = row['dyspnea_description']\n",
        "                    walk_distance = float(row['distance_in_meters'])\n",
        "\n",
        "                    # Calculate BMI\n",
        "                    bmi = calculate_bmi(weight, height)\n",
        "\n",
        "                    # Calculate BODE score\n",
        "                    bode_score = calculate_bode_score(bmi, fev_pct, dyspnea_desc, walk_distance)\n",
        "\n",
        "                    # Calculate BODE survival risk\n",
        "                    risk = bode_risk(bode_score)\n",
        "\n",
        "                    # Append to patient list\n",
        "                    patients.append({\n",
        "                        'NAME': name,\n",
        "                        'BODE_SCORE': bode_score,\n",
        "                        'BODE_RISK': risk,\n",
        "                        'HOSPITAL': hospital\n",
        "                    })\n",
        "\n",
        "                    # Aggregate hospital data\n",
        "                    if hospital not in hospitals:\n",
        "                        hospitals[hospital] = {'count': 0, 'total_score': 0, 'total_risk': 0}\n",
        "\n",
        "                    hospitals[hospital]['count'] += 1\n",
        "                    hospitals[hospital]['total_score'] += bode_score\n",
        "                    hospitals[hospital]['total_risk'] += risk\n",
        "\n",
        "                except ValueError as e:\n",
        "                    print(f\"Error processing patient {row['NAME']}: {e}\")\n",
        "\n",
        "    except FileNotFoundError:\n",
        "        print(f\"Error: The file {input_file} does not exist.\")\n",
        "\n",
        "    return patients, hospitals\n",
        "\n",
        "# Write patient data to CSV\n",
        "def write_patient_output(patient_output_file, patients):\n",
        "    with open(patient_output_file, mode='w', newline='') as file:\n",
        "        writer = csv.DictWriter(file, fieldnames=['NAME', 'BODE_SCORE', 'BODE_RISK', 'HOSPITAL'])\n",
        "        writer.writeheader()\n",
        "        for patient in patients:\n",
        "            writer.writerow(patient)\n",
        "\n",
        "# Write hospital data to CSV\n",
        "def write_hospital_output(hospital_output_file, hospitals, beds_per_hospital):\n",
        "    with open(hospital_output_file, mode='w', newline='') as file:\n",
        "        writer = csv.DictWriter(file, fieldnames=['HOSPITAL_NAME', 'COPD_COUNT', 'PCT_OF_COPD_CASES_OVER_BEDS', 'AVG_SCORE', 'AVG_RISK'])\n",
        "        writer.writeheader()\n",
        "        for hospital, data in hospitals.items():\n",
        "            beds = beds_per_hospital.get(hospital, 100)  # Default to 100 beds if not provided\n",
        "            avg_score = data['total_score'] / data['count'] if data['count'] > 0 else 0\n",
        "            avg_risk = data['total_risk'] / data['count'] if data['count'] > 0 else 0\n",
        "            writer.writerow({\n",
        "                'HOSPITAL_NAME': hospital,\n",
        "                'COPD_COUNT': data['count'],\n",
        "                'PCT_OF_COPD_CASES_OVER_BEDS': (data['count'] / beds) * 100,\n",
        "                'AVG_SCORE': avg_score,\n",
        "                'AVG_RISK': avg_risk\n",
        "            })\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Correct file paths\n",
        "    patient_csv = 'patient.csv'\n",
        "    hospital_json = 'hospitals.json'\n",
        "    patient_output_file = 'patient_output.csv'\n",
        "    hospital_output_file = 'hospital_output.csv'\n",
        "\n",
        "    # Load hospital bed data from the JSON file\n",
        "    beds_per_hospital = load_hospitals(hospital_json)\n",
        "\n",
        "    # Process the patient data using the loaded hospital data\n",
        "    patients, hospitals = process_patients(patient_csv, beds_per_hospital)\n",
        "\n",
        "    # Write output files\n",
        "    write_patient_output(patient_output_file, patients)\n",
        "    write_hospital_output(hospital_output_file, hospitals, beds_per_hospital)\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}